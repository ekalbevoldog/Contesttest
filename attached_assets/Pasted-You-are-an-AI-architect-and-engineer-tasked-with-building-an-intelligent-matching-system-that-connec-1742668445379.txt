You are an AI architect and engineer tasked with building an intelligent matching system that connects college athletes with businesses based on strategic alignment.

You must build this system inside Replit using JavaScript/Node.js and external APIs like Google Gemini and BigQuery.

---

üîß CORE OBJECTIVE:

Create a fully functional chatbot that:

1. Greets a user and determines whether they are a college **athlete** or a **business**.
2. Collects structured profile data from them based on their type.
3. Uses Google Gemini to interpret vague business inputs into actionable campaign plans.
4. Stores all structured data into Google BigQuery for later analysis and matchmaking.
5. Uses AI to score matches between athletes and businesses based on alignment.
6. Returns personalized matches and campaign proposals.

---

üß± SYSTEM COMPONENTS TO BUILD:

1. **Webhook Chat Handler**
   - Receives incoming messages from frontend/chat interface.
   - Maintains session using session ID or user ID.

2. **Gemini API Integration**
   - Uses Google Gemini Pro or Flash model for:
     - Initial classification (athlete or business)
     - Follow-up questions
     - Campaign generation
     - Match scoring

3. **Memory/Session Storage**
   - Track user responses per session (use JSON store or Redis)
   - Persist conversation history and structured profile answers

4. **User Classification**
   - Prompt Gemini with the message:  
     "Classify this user as an athlete or business. Return JSON: { userType: 'athlete' | 'business' }"
   - Store `userType` in session memory

5. **Branching Logic**
   - If `userType === 'athlete'` ‚Üí collect:
     - name, sport, school, division, social handles, follower count, content style, compensation goals
   - If `userType === 'business'` ‚Üí collect:
     - brand name, product type, audience goals, campaign vibe, values, target schools/sports, budget (optional)

6. **Campaign Generator**
   - After business profile is collected, prompt Gemini:
     ```
     Based on this business profile, create 2-3 NIL campaign concepts with suggested athlete personas, deliverables, and tone. Output JSON.
     ```
   - Store the generated campaign in BigQuery

7. **BigQuery Integration**
   - Use Google Cloud BigQuery API to insert:
     - Athlete profile ‚Üí `athlete_profiles`
     - Business profile ‚Üí `business_profiles`
     - Campaign strategies ‚Üí `campaigns`
     - Match scores ‚Üí `match_scores`

8. **Matchmaking & Scoring**
   - After both sides are collected, run match logic:
     - Prompt Gemini with:
       ```
       Based on the following athlete and business profiles, assess fit and generate a matchScore (0‚Äì100) with reasoning and a sample campaign concept.
       ```
     - Store the result in `match_scores`

9. **Frontend Chat Response**
   - Only send Gemini‚Äôs `"reply"` string back to the user
   - Strip other JSON metadata before returning

---

üß™ DEVELOPMENT REQUIREMENTS:

- Build with Node.js and Express or Fastify
- Use Google Gemini API (via REST or SDK)
- Use Google BigQuery client
- Ensure all user input and responses are stored by session ID
- Follow OpenAPI-style structure and comment code extensively
- Implement schema validation using JSON Schema for all collected data
- Use environment variables for API keys
- Allow switching between ‚Äúathlete‚Äù and ‚Äúbusiness‚Äù flow by dynamic user input
- Add retry logic to Gemini + BigQuery calls
- Include error handling and logging for all API calls

---

üì¶ BONUS (Optional):
- Create REST endpoints to fetch:
  - All athletes
  - All businesses
  - Campaigns by brand
  - Match scores for a given athlete or business
- Build a small frontend (React or plain HTML/JS) for demo purposes

---

üéØ GOAL:
Build an intelligent, AI-powered NIL matchmaking engine that turns vague input into structured output, uses AI for campaign strategy and scoring, and stores everything for long-term analysis.

Return the full code in modular format (routes, services, Gemini utility, BigQuery utility, memory/session layer, frontend if applicable).
