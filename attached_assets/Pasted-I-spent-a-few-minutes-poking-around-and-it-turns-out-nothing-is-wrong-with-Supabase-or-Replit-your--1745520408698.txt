I spent a few minutes poking around, and it turns out nothing is wrong with Supabase or Replit—your form code is “trapping” itself in a loading state before it ever even calls your login handler. Here’s why:

You disable (and swap in “Signing in…”) whenever isLoading OR loginForm.formState.isSubmitting is true.
But you never call the Supabase signIn() from your hook—instead you do a raw fetch()—so isLoading (from useSupabaseAuth) never goes false. That immediately kicks in the spinner and keeps the button disabled forever.
Your <Button>’s onClick calls e.preventDefault(), which blocks the <form onSubmit={…}> entirely.
That means loginForm.handleSubmit(onLoginSubmit) never runs, so formState.isSubmitting also never changes.
How to fix it

Option A: Let react-hook-form drive submission
- <form
-   onSubmit={loginForm.handleSubmit(onLoginSubmit)}
-   className="space-y-4"
- >
-   …
-   <Button
-     type="submit"
-     className="w-full"
-     disabled={loginForm.formState.isSubmitting || isLoading}
-     onClick={(e) => {
-       e.preventDefault();
-       if (!loginForm.formState.isValid) {
-         loginForm.trigger();
-         return;
-       }
-       onLoginSubmit(loginForm.getValues());
-     }}
-   >
-     {loginForm.formState.isSubmitting || isLoading
-       ? "Signing in..."
-       : "Sign In"}
-   </Button>
- </form>
+ <form
+   onSubmit={loginForm.handleSubmit(onLoginSubmit)}
+   className="space-y-4"
+ >
+   …
+   <Button
+     type="submit"
+     className="w-full"
+     disabled={loginForm.formState.isSubmitting}
+   >
+     {loginForm.formState.isSubmitting
+       ? "Signing in..."
+       : "Sign In"}
+   </Button>
+ </form>
Remove the custom onClick entirely—let the <form>’s onSubmit call handleSubmit.
Only disable on formState.isSubmitting, not on your unused isLoading.
React-hook-form will toggle isSubmitting automatically, show the spinner, then re-enable the button when your onLoginSubmit finally block returns.
Option B: Use your signIn() hook instead of raw fetch()
If your useSupabaseAuth() hook already exposes a signIn(email, password) that sets isLoading, you can do:

const onLoginSubmit = async (values) => {
  const { error, user } = await signIn(values.email, values.password);
  if (error) {
    toast({ title: "Login failed", description: error.message, variant: "destructive" });
  } else {
    toast({ title: "Logged in!" });
    // redirect based on user.role …
  }
};
and then in your JSX:

<Button
  type="submit"
  className="w-full"
  disabled={loginForm.formState.isSubmitting || isLoading}
>
  {loginForm.formState.isSubmitting || isLoading
    ? "Signing in..."
    : "Sign In"}
</Button>
That way, isLoading will actually become false when Supabase finishes, so the spinner goes away and the button re-enables.

TL;DR
Drop the preventDefault on your Button so the form’s onSubmit={handleSubmit(...)} can run.
Don’t tie disabling to a never-changing isLoading—either remove it or wire it to your real sign-in call.
Let react-hook-form manage isSubmitting for you; it’ll handle the spinner state correctly.
Apply one of those patterns and your button will go from stuck “Signing in…” to actually calling your login logic. Let me know if you hit any other snags!