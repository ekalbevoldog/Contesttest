# Contested Campaign Wizard – End‑to‑End Technical Specification

*Last updated: 2 May 2025*

---

## 1. Purpose & Scope

This document provides an exhaustive blueprint for designing, building, and shipping two campaign‑creation wizards inside the Contested platform:

1. **Pro Wizard** – for experienced marketers who know their desired objectives and assets.
2. **Guided Wizard** – for users with limited marketing background who need step‑by‑step guidance.

Both wizards funnel into the same backend services (campaign orchestration, athlete matching, contracting, and notifications) and share a common data model. The goal is to accelerate engineering implementation by specifying:

* Front‑end UI/UX flows and component trees
* API contracts, event schemas, and database schema extensions
* Machine‑learning pipelines for match scoring, cost forecasting, and bundle optimization
* Security, compliance, and DevOps requirements

---

## 2. Architectural Overview

### 2.1 High‑Level Diagram *(ASCII description)*

```text
┌─────────────┐      GraphQL          ┌────────────────┐      gRPC/REST          ┌──────────────┐
│  Next.js    │ ───────────────────► │  CampaignSvc   │ ───────────────────────► │ MatchingSvc  │
│  (FE+BE)    │◄──────────────────── │  (Node/TS)     │ ◄───────────────────────│ (Python)     │
└─────────────┘  WebSockets          └────────────────┘  Kafka Events           └──────────────┘
      ▲                                       ▲                                       ▲
      │                                       │                                       │
 React Query                               Postgres/                           Feature Store
                                            Supabase
```

*Every major component is containerised and deployed via Kubernetes on GCP (GKE).*

### 2.2 Microservices

| Service              | Language                 | Responsibilities                                                                                           |
| -------------------- | ------------------------ | ---------------------------------------------------------------------------------------------------------- |
| **CampaignSvc**      | Node.js + TypeScript     | Orchestrates wizard steps; persists Campaign, Deliverable, Offer, Bundle, KPI records; emits domain events |
| **MatchingSvc**      | Python (FastAPI)         | Calculates match scores, synergy scores, bundle recommendations, and returns paginated athlete lists       |
| **CostForecastSvc**  | Python                   | Time‑series models (Prophet) that predict CPM, CPC → budget guidance                                       |
| **AssetChecklistAI** | Python + OpenAI GPT‑4o   | Generates asset checklists and creative briefs based on selected campaign types                            |
| **ContractSvc**      | Node.js                  | Compiles Handlebars templates, pushes documents to DocuSign, tracks signature status                       |
| **NotificationBus**  | Kafka + NestJS consumers | Broadcasts Offer‑\* events to email / SMS / in‑app push                                                    |

---

## 3. Data Model (Postgres 13 via Supabase)

### 3.1 Core Tables

* **users** (`id`, `role`, `email`, `first_name`, …)
* **business\_profiles** (`id`, `user_id FK`, `company_name`, `industry`, …)
* **athlete\_profiles** (`id`, `user_id FK`, `sport`, `division`, `followers`, `avg_engagement_rate`, `rate_card_jsonb`, …)
* **campaigns** (`id`, `business_id FK`, `wizard_type`, `objective`, `budget_min`, `budget_max`, `status`, `created_at`)
* **deliverables** (`id`, `campaign_id FK`, `asset_type`, `platform`, `due_date`, `kpi_goal`, `accepted_at`)
* **campaign\_kpi\_definitions** (`id`, `campaign_id FK`, `metric`, `target_value`, `weight`) – links to athlete‑specific KPI logs.
* **match\_candidates** (`id`, `campaign_id FK`, `athlete_id FK`, `match_score`, `synergy_score`, `bundle_id nullable`)
* **bundles** (`id`, `campaign_id FK`, `total_cost`, `discount_pct`, `synergy_score`)
* **offers** (`id`, `bundle_id FK`, `athlete_id FK nullable`, `status`, `signed_url`, `expires_at`)

> **Indexes:** GIN on `athlete_profiles.rate_card_jsonb`, BTREE composite on `match_candidates (campaign_id, match_score DESC)`.

### 3.2 Event Topics (Kafka)

* `OfferSent`, `OfferViewed`, `OfferAccepted`, `DeliverableCompleted`, `KPIThresholdMet`, `CampaignStatusChanged`

---

## 4. Front‑End Implementation (Next.js 14 + React 19)

### 4.1 Shared Stack

* **Design System**: shadcn/ui components + TailwindCSS (utility‑first, themable)
* **State Management**: React Query for data fetching; Zustand for local wizard state between steps
* **Auth**: Supabase Auth (JWT) → `supabase-js` client library
* **Form Handling**: React Hook Form + Zod validation schema per step

### 4.2 Pro Wizard – Exact UI/UX Flow

> **Route prefix**: `/wizard/pro`  •  **State Provider**: `<ProWizardProvider>` (Zustand)

| Step No. | URL Path        | Page Header (H1)                | Primary Components                                                                                                                                                                   | Key Actions & Validations                                                                                                                                     |
| -------- | --------------- | ------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **1**    | `/start`        | *Quick Launch: Campaign Basics* | `ObjectiveSelect`, `ChannelMultiSelect`, `DateRangePicker`, `AutoSaveStatus` (bottom‑left)                                                                                           | • Required: objective, ≥ 1 channel <br>• Inline error if end date < start date <br>• Auto‑save every 5 s via `PATCH /campaigns/:id`                           |
| **2**    | `/advanced`     | *Targets & Budget*              | Left **(30 %)**: `KPIBuilderGrid` (editable rows) <br>Right **(70 %)**: `BudgetSlider`, `CostForecastPanel` (calls CostForecastSvc)                                                  | • KPI weights must sum to 100 % (real‑time validator) <br>• Budget slider min≤max; forecast panel spins while loading                                         |
| **3**    | `/deliverables` | *Assets & Milestones*           | 2‑pane layout: <br>• **Left** – `DeliverableTree` (nested list, drag‑to‑re‑order) <br>• **Right** – `ChecklistDrawer` (AI‑generated), `MilestoneCalendar`                            | • Adding new deliverable opens `DeliverableModal` (validated form) <br>• Missing checklist items flagged with red dot in tree                                 |
| **4**    | `/match`        | *Find Athletes*                 | **FilterSidebar** (accordion facets) <br>`MatchTable` (virtualised row list) <br>`ScoreBreakdownPopover`                                                                             | • Clicking “Run Match” triggers mutation → Loading shimmer rows <br>• Sortable columns (score, followers, avg ER) <br>• Empty state illustration if 0 matches |
| **5**    | `/bundle`       | *Bundle Builder*                | Grid **(75 %-25 %)**: <br>• **Main** – `AthleteCards` (selectable) → drag into `BundleCanvas` (dropzone) <br>• **Sidebar** – `BundleSummaryCard` (cost breakdown, synergy score bar) | • Minimum 1 athlete to proceed; max 10 per bundle <br>• Discount tiers visually indicated (progress bar) <br>• Removing athlete auto‑recalculates price       |
| **6**    | `/review`       | *Review & Send*                 | `ContractPreview` (iframe) <br>`OfferTermsAccordion` (deliverables, KPIs, payments) <br>`SendOfferButton`                                                                            | • `SendOffer` mutation creates offers + emits `OfferSent` event <br>• Success toast + redirect to `/campaigns/:id/overview`                                   |

#### 4.2.1 Component Hierarchy (per page)

```text
<Page>
 ├─ <Header />            – Wizard progress bar (Stepper + status save icon)
 ├─ <MainGrid>
 │    ├─ <LeftPane>      – varies by step
 │    └─ <RightPane>     – varies by step
 └─ <Footer>
      ├─ <BackButton />  – disabled on step 1
      └─ <NextButton />  – validation‑aware
```

All components consume context from `<ProWizardProvider>` which stores `campaignId`, partial form state, and dirty flags.

#### 4.2.2 Micro‑Interactions & UX Details

* **Autosave Indicator**: A subtle green check appears whenever latest changes are synced; shows red “Offline” if network error > 3 s.
* **Keyboard Shortcuts**: ⌘+S triggers manual save; ←/→ to move between steps.
* **Undo/Redo**: Up to 20 history states for deliverable tree edits (implemented via Immer)
* **Accessibility**: All buttons have aria‑labels; tab order follows visual order; color contrast AA+.

#### 4.2.3 Analytics & Logging

| Event Name              | Trigger                           | Payload Example                            |
| ----------------------- | --------------------------------- | ------------------------------------------ |
| `wizard_step_completed` | User clicks **Next**              | `{step:3,campaignId:"…",durationMs:52894}` |
| `match_filter_applied`  | Filter toggled                    | `{filter:"sport=soccer"}`                  |
| `bundle_created`        | First athlete dropped into canvas | `{campaignId:"…",bundleSize:3}`            |

#### 4.2.4 Error Handling States

* **Network Failure**: Snackbar “Lost connection – trying to reconnect…”; retry exponential backoff.
* **Save Conflict**: If another teammate edits same campaign, show merge dialog highlighting field diffs.
* **DocuSign Error**: Modal with envelopeId diagnostics + “Retry Send” button.

#### 4.2.5 Mobile & Tablet

* Wizard is **desktop‑first**; breakpoints:

  * ≥ 1280 px: 2‑column
  * 768‑1279 px: components collapse to vertical stack; sidebar becomes accordion
  * ≤ 767 px: show blocking screen: “Please complete campaign setup on desktop for full functionality.”

#### 4.2.6 API Contract Summary (per step)

| Step | API                   | Method  | Body Params                                  |
| ---- | --------------------- | ------- | -------------------------------------------- |
| 1    | `/campaigns`          | `PATCH` | `{objective,channels,startDate,endDate}`     |
| 2    | `/campaigns/:id/kpis` | `PUT`   | `[{metric, target, weight}]`                 |
| 3    | `/deliverables`       | `POST`  | `{campaignId, assetType, platform, dueDate}` |
| 4    | `/match/run`          | `POST`  | `{campaignId, filters}`                      |
| 5    | `/bundles`            | `POST`  | `{campaignId, athleteIds[]}`                 |
| 6    | `/offers/send`        | `POST`  | `{bundleId}`                                 |

---

### 4.3 Guided Wizard – (unchanged)

(7 Steps)

1. **Conversational Goal Discovery** (GPT‑powered chat widget)
2. **Template Selection** (cards with campaign thumbnails + expected outcomes)
3. **Deliverable Walkthrough** (one question per screen; progress bar)
4. **Budget Estimator** (visual slider with scenario cards: *nano‑influencer*, *micro‑influencer* …)
5. **Athlete Recommendations** (carousel of 10 profile cards; accept/reject toggle)
6. **Bundle Confirmation** (auto‑generated “Team” view)
7. **One‑Click Contract** (doc preview + Send)

Every step logs a `WizardStepCompleted` analytic event (Snowplow).

---

## 5. Matching & Scoring System

### 5.1 Feature Engineering

| Feature Category   | Features                                                                                     | Source                                        |
| ------------------ | -------------------------------------------------------------------------------------------- | --------------------------------------------- |
| **Engagement**     | likes\_per\_post, comments\_per\_post, view\_rate, follower\_growth\_30d                     | Social API ingest (TikTok, IG Graph, YouTube) |
| **Audience Fit**   | gender\_pct, age\_bucket\_pct, geo\_top3, interest\_embeddings\[768]                         | Creator IQ / Demographics API                 |
| **Brand Affinity** | cosine\_similarity(content\_embedding, brand\_embedding), sentiment\_score, profanity\_ratio | OpenAI embeddings + sentiment model           |
| **Compliance**     | ncaa\_eligibility\_flag, highschool\_nli\_flag, state\_nli\_flag                             | Rules DB                                      |

### 5.2 Model Architecture

* **Primary Model**: Gradient Boosted Trees (LightGBM) predicting `match_score ∈ [0,1]`.
* **Synergy Model**: Pairwise cosine similarity of audience embeddings to compute `synergy_score` for bundles.
* Training pipeline runs nightly via Airflow; metrics logged to MLflow.

### 5.3 Scoring Weights (default)

* Engagement 40 %
* Audience Fit 30 %
* Brand Affinity 20 %
* Compliance 10 %

Admin portal allows weight overrides per campaign.

---

## 6. Cost & Bundle Optimisation

### 6.1 Individual Pricing

* Athletes maintain a `rate_card_jsonb` containing tiered prices per deliverable type.
* The wizard calls `GET /pricing?athlete_id=X&deliverables=[…]` to retrieve net cost.

### 6.2 Bundling Logic

1. **Initial Cost**: `Σ individual_costs`.
2. **Volume Discount**: tiered ↓ % if `bundle_size ≥ 3`.
3. **Synergy Uplift**: if `synergy_score ≥ 0.7`, allow +15 % CPM reduction assumption → reflected as *“packaged reach efficiency.”*
4. **Final Bundle Cost** = (`initial_cost − discounts`) × (1 − synergy\_efficiency).

All discounts and uplifts feed back into ROI calculator ↔ CostForecastSvc.

---

## 7. Contract Generation & Offer Lifecycle

1. **Template Variables**: `{{athlete_name}}`, `{{deliverables_list}}`, `{{kpi_table}}`, `{{payment_schedule}}`.
2. **DocuSign Integration**:

   * CampaignSvc → `POST /contracts` (DocuSign REST v2) with template ID & payload.
   * Capture `envelopeId`, track status polling.
3. **Offer States**: `Draft → Sent → Viewed → Negotiation (optional) → Accepted/Declined`.
4. **Auto‑Expiry**: Cron job closes offers after `expires_at`.

---

## 8. Security & Compliance

* **RBAC**: roles `admin`, `business`, `athlete` enforced via Postgres RLS & GraphQL directive.
* **Minors Data**: Athlete DOB < 18 triggers restricted PII storage (encrypted column, rotated AES‑256 key).
* **Audit Logs**: `audit_log` table populated by database triggers for offers & contracts.
* **State NIL Rules**: `compliance_rules` table + policy engine (Open Policy Agent) executed pre‑contract.

---

## 9. DevOps & Observability

* **CI/CD**: GitHub Actions → Docker build → GKE deploy; Helm charts per microservice.
* **Secrets**: GCP Secret Manager; rotated quarterly.
* **Monitoring**: Prometheus + Grafana dashboards; Loki for log aggregation; Sentry for FE error tracking.
* **Load Testing**: k6 scripts covering wizard endpoints, target p95 latency < 300 ms.

---

## 10. Testing Strategy

| Layer         | Tools                              | Coverage                            |
| ------------- | ---------------------------------- | ----------------------------------- |
| Unit          | Jest (TS), PyTest (Py)             | ≥ 90 % per service                  |
| Integration   | Supertest (Node), `httpx` (Python) | critical path APIs                  |
| E2E           | Playwright (headless Chromium)     | full wizard happy path + edge cases |
| ML Validation | scikit‑learn cross‑val; AUC ≥ 0.82 | nightly pipeline                    |

---

## 11. Implementation Roadmap

1. **Week 1–2**: Scaffold CampaignSvc & DB migrations; stub GraphQL schema.
2. **Week 3–4**: Build Pro Wizard UI, integrate asset checklist.
3. **Week 5–6**: MatchingSvc MVP, connect filters + result list.
4. **Week 7–8**: Guided Wizard, CostForecastSvc, Bundle Optimiser.
5. **Week 9–10**: DocuSign & NotificationBus.
6. **Week 11**: Security hardening, RLS policies, compliance engine.
7. **Week 12**: Load test, bug‑bash, production cutover.

---

## 11‑A. Integration Guide for Existing Replit + Supabase Codebase

> *Use this if your main application already lives in Replit and you want to **drop the Pro Wizard in** instead of starting from a blank project.*

### A.1 Assumptions

* **Front‑end stack**: Next.js 13+/React 18 (App Router) or plain React SPA served by Express.
* **Back‑end**: Node 18+/Express or Next API routes.
* **Auth**: Supabase Auth JWT already wired.
* Project root has **`src/`** folder with existing pages/components.

### A.2 Directory & Routing

1. Create folder **`src/app/wizard/pro`** (if Next.js) or **`src/pages/wizard/pro`** (React Router).
2. Copy the six wizard step folders (`start`, `advanced`, … `review`) into that path.
3. Add **`wizard.tsx`** (lazy‑loaded) route definition in React Router:

   ```tsx
   <Route path="/wizard/pro/*" element={<ProWizardLayout />} />
   ```

### A.3 Shared State

* Place **`ProWizardProvider.tsx`** in `src/contexts/`.
* Wrap existing **`<App>`** root with provider so the wizard’s context doesn’t unmount when navigating away.

  ```tsx
  <ProWizardProvider>
    <Router>…</Router>
  </ProWizardProvider>
  ```

### A.4 Supabase Client Re‑use

* Your codebase already exports a Supabase client (e.g., `supabase.ts`). Use that instead of creating a new one.
* Add **typed** helper functions:

  ```ts
  export const insertCampaign = (payload) =>
    supabase.from('campaigns').insert([payload]).select().single();
  ```

### A.5 Navigation Hook‑Up

* Hide wizard link for **athlete** role.
* Add menu item to existing sidebar:

  ```tsx
  {user.role === 'business' && (
    <NavLink to="/wizard/pro/start" className="…">New Campaign</NavLink>
  )}
  ```

### A.6 DB Schema Migration

1. Pull latest migration SQL (see §6).
2. Run via Supabase SQL Editor or `supabase db push`.
3. Verify tables show under **public**: `campaigns`, `deliverables`, `bundles`, `offers`.

### A.7 API Integration Points

| Wizard Step      | API Logic                                                                         | Where to implement                                                         |
| ---------------- | --------------------------------------------------------------------------------- | -------------------------------------------------------------------------- |
| Start / Advanced | `insertCampaign`, `updateCampaign`                                                | Direct Supabase calls from client (OK because RLS filters on `auth.uid()`) |
| Deliverables     | `insertDeliverable` bulk                                                          | Supabase `rpc()` for batch insert or loop.                                 |
| Match            | Call internal route `/api/match/run` ➜ proxy to MatchingSvc microservice (Python) | Create `src/pages/api/match/run.ts` (Next) or Express `/match/run` route.  |
| Bundle           | `/api/bundle/create`                                                              | Node route aggregates costs + writes `bundles` table.                      |
| Review           | `/api/offer/send`                                                                 | Node route triggers DocuSign service + updates `offers.status='SENT'`.     |

### A.8 Environment Variables in Replit

Ensure these are set in Secrets:

```
SUPABASE_URL
SUPABASE_ANON_KEY
DOCUSIGN_INTEGRATOR_KEY
MATCHING_SVC_URL
```

In `.replit` or `replit.nix`, expose them:

```bash
export NEXT_PUBLIC_SUPABASE_URL=$SUPABASE_URL
…
```

### A.9 Incremental Feature Flags

Use `%wizard_pro_enabled` flag in a `feature_flags` table:

```sql
CREATE TABLE IF NOT EXISTS feature_flags (
  name text PRIMARY KEY,
  enabled boolean DEFAULT FALSE
);
INSERT INTO feature_flags(name, enabled) VALUES ('wizard_pro', TRUE)
  ON CONFLICT (name) DO UPDATE SET enabled = EXCLUDED.enabled;
```

Fetch in React and gate UI until QA sign‑off.

### A.10 QA Checklist

* [ ] User with **business** role can create campaign → six steps → DB rows created.
* [ ] RLS: athlete cannot view business campaigns (`select * from campaigns` returns 0).
* [ ] Live reload shows progress bar increment.
* [ ] “Back” navigation preserves state.
* [ ] Refresh mid‑wizard restores form from DB.
* [ ] Offer row appears in `offers` table with `status='SENT'` after step 6.
* [ ] Supabase logs show no `RLS` violation errors.

---

## 11‑B. Merge Checklist & Risk‑Controlled Roll‑out

> *Use this operational checklist once your wizard branch is feature‑complete and you’re ready to fold it into the live codebase.*

| Phase                             | Tasks                                                                                                                                             | Owner       | Done? |
| --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- | ----- |
| **1. Repository Prep**            | • Create long‑lived `wizard-pro` branch off `main`.<br>• Add `CODEOWNERS` entry → wizard team.<br>• Enable branch protection (PR + CI required).  | Dev Lead    | ☐     |
| **2. Dependency Audit**           | • Run `npm outdated` and align shared packages.<br>• Deduplicate CSS frameworks.<br>• Confirm single `@supabase/supabase-js` version across repo. | FE Lead     | ☐     |
| **3. Design System Alignment**    | • Map wizard components to existing tokens.<br>• Replace shadcn overrides with project variables.<br>• Run visual regression tests.               | Design Team | ☐     |
| **4. State & Auth Consolidation** | • Ensure global `<AuthProvider>`.<br>• Merge `ProWizardProvider` into context folder.<br>• Remove duplicate state libs if needed.                 | FE Lead     | ☐     |
| **5. Routing**                    | • Add `/wizard/pro/*` path.<br>• Gate with `wizard_pro` feature flag.<br>• 404 if athlete role.                                                   | FE Dev      | ☐     |
| **6. DB Migration & Backfill**    | • Run migrations in staging.<br>• Backfill FK columns.<br>• Verify RLS policies.<br>• Smoke‑test CRUD.                                            | DBA         | ☐     |
| **7. API Proxy**                  | • Deploy MatchingSvc.<br>• Add `/api/match/run` proxy.<br>• Unit‑test status codes.                                                               | BE Dev      | ☐     |
| **8. Canary Release**             | • Deploy to canary subdomain.<br>• Nightly Playwright runs.<br>• Monitor Supabase logs.                                                           | QA          | ☐     |
| **9. Observability Hooks**        | • Add Datadog traces, Sentry boundary.<br>• Log `wizard_step_completed` events.                                                                   | Dev Ops     | ☐     |
| **10. Progressive Enablement**    | • Flip flag for internal testers → 10 % rollout → 100 %.<br>• Monitor KPIs.                                                                       | PM          | ☐     |

### Risk Mitigation

| Risk                     | Mitigation                                        | Rollback Plan                                    |
| ------------------------ | ------------------------------------------------- | ------------------------------------------------ |
| DB migration locks table | Run `ADD COLUMN` nullable first; off‑peak window. | Restore from Supabase PITR snapshot.             |
| RLS leak exposes rows    | Pre‑launch pen‑test; auth spoof check.            | Disable route via feature flag; revoke JWT keys. |
| Bundle cost miscalc      | Unit tests with fixtures; sheet cross‑check.      | Hot‑patch function; nightly re‑calc diff alert.  |

### Artefact Registry

* **Figma**: `wizard-pro-v3.fig` in `/design/archives`
* **OpenAPI**: `campaign-svc.yaml` in `/api/schemas`
* **E2E scripts**: `/tests/e2e/wizard/*.spec.ts`

---

## 12. Appendix

Appendix

* **12.1 Sample GraphQL Mutation** `runMatch`

```graphql
mutation RunMatch($campaignId: UUID!) {
  runMatch(input: { campaignId: $campaignId }) {
    candidateIds
  }
}
```

* **12.2 Example Kafka `OfferSent` Payload**

```json
{
  "event_name": "OfferSent",
  "offer_id": "bdf9ca1c‑…",
  "bundle_id": "9b2b…",
  "recipient_ids": ["athlete‑uuid‑1", "athlete‑uuid‑2"],
  "sent_at": "2025‑05‑02T17:04:00Z"
}
```

* **12.3 Deliverable Types Enum**: `PHOTO_POST`, `SHORT_FORM_VIDEO`, `LIVE_STREAM`, `PODCAST_READ`, `BLOG_ARTICLE`, …

---

*End of specification.*


